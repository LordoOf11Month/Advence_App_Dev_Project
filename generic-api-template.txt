# Spring Boot ve Angular E-ticaret Projesi için Generic API Katmanı Şablonu

Bu şablon, e-ticaret projenizdeki tüm varlıklar (entity) için kullanabileceğiniz generic bir API katmanı (Controller + Service + Repository) yapısını içermektedir. Angular mock dataları gerçek veritabanı üzerinden sunacak API endpoint'ler için tasarlanmıştır.

## 1. Generic Repository Interface

```java
package com.example.repositories.generic;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.repository.NoRepositoryBean;

import java.io.Serializable;
import java.util.List;

@NoRepositoryBean
public interface GenericRepository<T, ID extends Serializable> extends JpaRepository<T, ID>, JpaSpecificationExecutor<T> {
    
    /**
     * Özel sorguları burada tanımlayabilirsiniz.
     * Her entity için gerektiğinde bu interface'i extend edip
     * custom sorgular ekleyebilirsiniz.
     */
    
    // Varsayılan olarak JpaRepository'den gelen metodlar:
    // save, findById, findAll, count, delete, deleteById vs.
    
    // JpaSpecificationExecutor'dan:
    // findAll(Specification<T> spec), findOne(Specification<T> spec) vs.
}
```

## 2. Entity-Specific Repository Implementation

```java
package com.example.repositories;

import com.example.models.EntityName;
import com.example.repositories.generic.GenericRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface EntityNameRepository extends GenericRepository<EntityName, Long> {
    
    // Entity'ye özel özel metodlar burada tanımlanır
    List<EntityName> findByField(String fieldValue);
    
    // Örnek bir JPQL sorgusu
    @Query("SELECT e FROM EntityName e WHERE e.someField = :value")
    List<EntityName> customQuery(@Param("value") String value);
}
```

## 3. Generic Service Interface

```java
package com.example.services.generic;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

public interface GenericService<T, D, C, ID extends Serializable> {
    
    List<D> findAll();
    
    Page<D> findAll(Pageable pageable);
    
    Page<D> findAll(Specification<T> spec, Pageable pageable);
    
    Optional<D> findById(ID id);
    
    D save(C createDto);
    
    D update(ID id, C updateDto);
    
    void delete(ID id);
    
    boolean exists(ID id);
    
    long count();
}
```

## 4. Generic Service Implementation

```java
package com.example.services.generic;

import com.example.repositories.generic.GenericRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public abstract class GenericServiceImpl<T, D, C, ID extends Serializable> implements GenericService<T, D, C, ID> {
    
    protected final GenericRepository<T, ID> repository;
    
    public GenericServiceImpl(GenericRepository<T, ID> repository) {
        this.repository = repository;
    }
    
    @Override
    public List<D> findAll() {
        return repository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
    
    @Override
    public Page<D> findAll(Pageable pageable) {
        return repository.findAll(pageable)
                .map(this::convertToDto);
    }
    
    @Override
    public Page<D> findAll(Specification<T> spec, Pageable pageable) {
        return repository.findAll(spec, pageable)
                .map(this::convertToDto);
    }
    
    @Override
    public Optional<D> findById(ID id) {
        return repository.findById(id)
                .map(this::convertToDto);
    }
    
    @Override
    @Transactional
    public D save(C createDto) {
        T entity = convertToEntity(createDto);
        T savedEntity = repository.save(entity);
        return convertToDto(savedEntity);
    }
    
    @Override
    @Transactional
    public D update(ID id, C updateDto) {
        if (!repository.existsById(id)) {
            throw new RuntimeException("Entity not found with id: " + id);
        }
        
        T entity = convertToEntityForUpdate(id, updateDto);
        T updatedEntity = repository.save(entity);
        return convertToDto(updatedEntity);
    }
    
    @Override
    @Transactional
    public void delete(ID id) {
        repository.deleteById(id);
    }
    
    @Override
    public boolean exists(ID id) {
        return repository.existsById(id);
    }
    
    @Override
    public long count() {
        return repository.count();
    }
    
    // Alt sınıfların uygulaması gereken abstract metodlar
    protected abstract D convertToDto(T entity);
    
    protected abstract T convertToEntity(C createDto);
    
    protected abstract T convertToEntityForUpdate(ID id, C updateDto);
}
```

## 5. Entity-Specific Service Implementation

```java
package com.example.services;

import com.example.DTO.EntityNameDTO;
import com.example.DTO.EntityNameDTO.EntityNameResponse;
import com.example.DTO.EntityNameDTO.CreateEntityNameRequest;
import com.example.models.EntityName;
import com.example.repositories.EntityNameRepository;
import com.example.services.generic.GenericServiceImpl;
import com.example.services.specifications.EntityNameSpecification;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EntityNameService extends GenericServiceImpl<EntityName, EntityNameResponse, CreateEntityNameRequest, Long> {
    
    private final EntityNameRepository entityNameRepository;
    
    public EntityNameService(EntityNameRepository entityNameRepository) {
        super(entityNameRepository);
        this.entityNameRepository = entityNameRepository;
    }
    
    /**
     * Entity'ye özel filtre metodları
     */
    public Page<EntityNameResponse> browseEntityNames(EntityNameDTO.EntityNameFilterRequest filter, Pageable pageable) {
        Specification<EntityName> spec = EntityNameSpecification.filterBy(filter);
        return findAll(spec, pageable);
    }
    
    /**
     * Entity'ye özel özel metodlar
     */
    public List<EntityNameResponse> findByCustomCriteria(String criteria) {
        return entityNameRepository.findByField(criteria).stream()
                .map(this::convertToDto)
                .toList();
    }
    
    @Override
    protected EntityNameResponse convertToDto(EntityName entity) {
        EntityNameResponse response = new EntityNameResponse();
        // Varlık alanlarının DTO'ya map edilmesi
        response.setId(entity.getId());
        response.setName(entity.getName());
        // Diğer alanların doldurulması
        return response;
    }
    
    @Override
    protected EntityName convertToEntity(CreateEntityNameRequest createDto) {
        EntityName entity = new EntityName();
        // DTO alanlarının varlığa map edilmesi
        entity.setName(createDto.getName());
        // Diğer alanların doldurulması
        return entity;
    }
    
    @Override
    protected EntityName convertToEntityForUpdate(Long id, CreateEntityNameRequest updateDto) {
        EntityName existingEntity = entityNameRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("EntityName not found with id: " + id));
        
        // DTO alanlarının varlığa map edilmesi
        existingEntity.setName(updateDto.getName());
        // Diğer alanların doldurulması
        
        return existingEntity;
    }
}
```

## 6. Entity Specification for Filtering

```java
package com.example.services.specifications;

import com.example.DTO.EntityNameDTO.EntityNameFilterRequest;
import com.example.models.EntityName;
import org.springframework.data.jpa.domain.Specification;

import jakarta.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.List;

public class EntityNameSpecification {
    
    public static Specification<EntityName> filterBy(EntityNameFilterRequest filter) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();
            
            // String alan filtresi
            if (filter.getName() != null && !filter.getName().isEmpty()) {
                predicates.add(criteriaBuilder.like(
                    criteriaBuilder.lower(root.get("name")), 
                    "%" + filter.getName().toLowerCase() + "%"
                ));
            }
            
            // Sayısal alan filtresi
            if (filter.getMinPrice() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(
                    root.get("price"), filter.getMinPrice()
                ));
            }
            
            if (filter.getMaxPrice() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(
                    root.get("price"), filter.getMaxPrice()
                ));
            }
            
            // Boolean alan filtresi
            if (filter.getInStock() != null) {
                predicates.add(criteriaBuilder.equal(
                    root.get("inStock"), filter.getInStock()
                ));
            }
            
            // İlişki (relation) filtresi
            if (filter.getCategoryId() != null) {
                predicates.add(criteriaBuilder.equal(
                    root.get("category").get("id"), filter.getCategoryId()
                ));
            }
            
            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }
}
```

## 7. DTO Sınıfları

```java
package com.example.DTO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

public class EntityNameDTO {
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class EntityNameResponse {
        private Long id;
        private String name;
        private String description;
        private BigDecimal price;
        private Boolean inStock;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        // Diğer response alanları
    }
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CreateEntityNameRequest {
        private String name;
        private String description;
        private BigDecimal price;
        // Diğer create/update alanları
    }
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class EntityNameFilterRequest {
        private String name;
        private BigDecimal minPrice;
        private BigDecimal maxPrice;
        private Boolean inStock;
        private Long categoryId;
        // Diğer filtre alanları
    }
}
```

## 8. Generic Controller

```java
package com.example.controllers.generic;

import com.example.services.generic.GenericService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.io.Serializable;
import java.util.List;

public abstract class GenericController<T, D, C, ID extends Serializable> {
    
    protected final GenericService<T, D, C, ID> service;
    
    public GenericController(GenericService<T, D, C, ID> service) {
        this.service = service;
    }
    
    @GetMapping
    public ResponseEntity<Page<D>> getAll(Pageable pageable) {
        return ResponseEntity.ok(service.findAll(pageable));
    }
    
    @GetMapping("/all")
    public ResponseEntity<List<D>> getAll() {
        return ResponseEntity.ok(service.findAll());
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<D> getById(@PathVariable ID id) {
        return service.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    
    @PostMapping
    public ResponseEntity<D> create(@Valid @RequestBody C createDto) {
        return ResponseEntity.ok(service.save(createDto));
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<D> update(@PathVariable ID id, @Valid @RequestBody C updateDto) {
        return ResponseEntity.ok(service.update(id, updateDto));
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable ID id) {
        service.delete(id);
        return ResponseEntity.noContent().build();
    }
}
```

## 9. Entity-Specific Controller Implementation

```java
package com.example.controllers;

import com.example.DTO.EntityNameDTO;
import com.example.DTO.EntityNameDTO.EntityNameResponse;
import com.example.DTO.EntityNameDTO.CreateEntityNameRequest;
import com.example.DTO.EntityNameDTO.EntityNameFilterRequest;
import com.example.controllers.generic.GenericController;
import com.example.models.EntityName;
import com.example.services.EntityNameService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/entity-names")
public class EntityNameController extends GenericController<EntityName, EntityNameResponse, CreateEntityNameRequest, Long> {
    
    private final EntityNameService entityNameService;
    
    public EntityNameController(EntityNameService entityNameService) {
        super(entityNameService);
        this.entityNameService = entityNameService;
    }
    
    /**
     * Filtreleme için özel endpoint
     */
    @GetMapping("/filter")
    public ResponseEntity<Page<EntityNameResponse>> filterEntityNames(EntityNameFilterRequest filter, Pageable pageable) {
        return ResponseEntity.ok(entityNameService.browseEntityNames(filter, pageable));
    }
    
    /**
     * Entity'ye özel özel endpoint'ler
     */
    @GetMapping("/custom-criteria/{criteria}")
    public ResponseEntity<List<EntityNameResponse>> getByCustomCriteria(@PathVariable String criteria) {
        return ResponseEntity.ok(entityNameService.findByCustomCriteria(criteria));
    }
}
```

## 10. Angular Mock Data ile Eşleştirme Örneği

Angular tarafında mock data olarak tanımlanmış bir Product nesnesi için Spring Boot tarafında gerçek veritabanı entegrasyonu aşağıdaki gibi yapılabilir:

### Angular Product Model (Örnek)
```typescript
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  originalPrice?: number;
  discountPercentage?: number;
  category: string;
  brand: string;
  rating: number;
  reviewCount: number;
  images: string[];
  colors?: string[];
  sizes?: string[];
  freeShipping?: boolean;
  fastDelivery?: boolean;
  inStock: boolean;
  sellerId: string;
  sellerName: string;
}
```

### Spring Boot Entity, DTO ve Repository Örneği

#### Product Entity
```java
@Entity
@Table(name = "products")
@Getter @Setter
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "product_id")
    private Long id;
    
    @Column(name = "title", length = 100, nullable = false)
    private String title;
    
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;
    
    @Column(name = "price", precision = 10, scale = 2, nullable = false)
    private BigDecimal price;
    
    @Column(name = "original_price", precision = 10, scale = 2)
    private BigDecimal originalPrice;
    
    @Column(name = "discount_percentage")
    private Integer discountPercentage;
    
    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;
    
    @Column(name = "brand", length = 50)
    private String brand;
    
    @Column(name = "rating")
    private Float rating;
    
    @Column(name = "review_count")
    private Integer reviewCount;
    
    @Column(name = "in_stock")
    private Boolean inStock;
    
    @Column(name = "free_shipping")
    private Boolean freeShipping;
    
    @Column(name = "fast_delivery")
    private Boolean fastDelivery;
    
    @ManyToOne
    @JoinColumn(name = "seller_id")
    private User seller;
    
    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ProductImage> images;
    
    @ElementCollection
    @CollectionTable(name = "product_colors", joinColumns = @JoinColumn(name = "product_id"))
    @Column(name = "color")
    private List<String> colors;
    
    @ElementCollection
    @CollectionTable(name = "product_sizes", joinColumns = @JoinColumn(name = "product_id"))
    @Column(name = "size")
    private List<String> sizes;
}
```

#### Product DTO
```java
public class ProductDTO {
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ProductResponse {
        private Long id;
        private String title;
        private String description;
        private BigDecimal price;
        private BigDecimal originalPrice;
        private Integer discountPercentage;
        private String category;
        private String brand;
        private Float rating;
        private Integer reviewCount;
        private List<String> images;
        private List<String> colors;
        private List<String> sizes;
        private Boolean freeShipping;
        private Boolean fastDelivery;
        private Boolean inStock;
        private Long sellerId;
        private String sellerName;
    }
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CreateProductRequest {
        @NotBlank(message = "Title is required")
        private String title;
        
        private String description;
        
        @NotNull(message = "Price is required")
        @Positive(message = "Price must be positive")
        private BigDecimal price;
        
        private BigDecimal originalPrice;
        
        @Min(0) @Max(100)
        private Integer discountPercentage;
        
        private Long categoryId;
        
        private String brand;
        
        private Boolean inStock = true;
        
        private Boolean freeShipping = false;
        
        private Boolean fastDelivery = false;
        
        @NotNull(message = "Seller ID is required")
        private Long sellerId;
        
        private List<String> colors;
        
        private List<String> sizes;
        
        private List<String> imageUrls;
    }
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ProductFilterRequest {
        private String search;
        private Long categoryId;
        private String brand;
        private BigDecimal minPrice;
        private BigDecimal maxPrice;
        private Boolean inStock;
        private Boolean freeShipping;
        private Boolean fastDelivery;
        private Long sellerId;
    }
}
```

#### Product Service to DTO Dönüşümü
```java
@Override
protected ProductResponse convertToDto(Product entity) {
    ProductResponse response = new ProductResponse();
    response.setId(entity.getId());
    response.setTitle(entity.getTitle());
    response.setDescription(entity.getDescription());
    response.setPrice(entity.getPrice());
    response.setOriginalPrice(entity.getOriginalPrice());
    response.setDiscountPercentage(entity.getDiscountPercentage());
    response.setCategory(entity.getCategory() != null ? entity.getCategory().getName() : null);
    response.setBrand(entity.getBrand());
    response.setRating(entity.getRating());
    response.setReviewCount(entity.getReviewCount());
    response.setInStock(entity.getInStock());
    response.setFreeShipping(entity.getFreeShipping());
    response.setFastDelivery(entity.getFastDelivery());
    response.setSellerId(entity.getSeller() != null ? entity.getSeller().getId() : null);
    response.setSellerName(entity.getSeller() != null ? entity.getSeller().getName() : null);
    
    // Liste dönüşümleri
    response.setImages(entity.getImages().stream()
            .map(ProductImage::getUrl)
            .collect(Collectors.toList()));
    
    response.setColors(entity.getColors());
    response.setSizes(entity.getSizes());
    
    return response;
}
```

## 11. Kullanım Örneği - Yeni Bir Entity İçin

Yeni bir entity eklemek istediğinizde:

1. Entity sınıfı oluşturun
2. DTO sınıflarını oluşturun (Response, CreateRequest, FilterRequest)
3. Repository interface'ini GenericRepository'den extend edin
4. Service sınıfını GenericServiceImpl'den extend edin ve dönüşüm metodlarını implement edin
5. Controller sınıfını GenericController'dan extend edin ve özel endpoint'leri ekleyin

Örneğin, Angular'da "Discount" modeli için:

### Entity
```java
@Entity
@Table(name = "discounts")
@Getter @Setter
public class Discount {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "name", nullable = false)
    private String name;
    
    @Column(name = "description")
    private String description;
    
    @Column(name = "discount_percent", nullable = false)
    private Integer discountPercent;
    
    @Column(name = "active", nullable = false)
    private Boolean active = true;
    
    @Column(name = "start_date", nullable = false)
    private LocalDateTime startDate;
    
    @Column(name = "end_date", nullable = false)
    private LocalDateTime endDate;
    
    @ManyToOne
    @JoinColumn(name = "product_id")
    private Product product;
}
```

### Repository
```java
@Repository
public interface DiscountRepository extends GenericRepository<Discount, Long> {
    List<Discount> findByProductId(Long productId);
    List<Discount> findByActiveAndEndDateAfter(Boolean active, LocalDateTime date);
}
```

### Service
```java
@Service
public class DiscountService extends GenericServiceImpl<Discount, DiscountDTO.DiscountResponse, DiscountDTO.CreateDiscountRequest, Long> {
    
    private final DiscountRepository discountRepository;
    private final ProductRepository productRepository;
    
    public DiscountService(DiscountRepository discountRepository, ProductRepository productRepository) {
        super(discountRepository);
        this.discountRepository = discountRepository;
        this.productRepository = productRepository;
    }
    
    // Aktif indirimleri getir
    public List<DiscountDTO.DiscountResponse> getActiveDiscounts() {
        return discountRepository.findByActiveAndEndDateAfter(true, LocalDateTime.now()).stream()
                .map(this::convertToDto)
                .toList();
    }
    
    // Ürüne göre indirimleri getir
    public List<DiscountDTO.DiscountResponse> getDiscountsByProduct(Long productId) {
        return discountRepository.findByProductId(productId).stream()
                .map(this::convertToDto)
                .toList();
    }
    
    @Override
    protected DiscountDTO.DiscountResponse convertToDto(Discount entity) {
        DiscountDTO.DiscountResponse response = new DiscountDTO.DiscountResponse();
        response.setId(entity.getId());
        response.setName(entity.getName());
        response.setDescription(entity.getDescription());
        response.setDiscountPercent(entity.getDiscountPercent());
        response.setActive(entity.getActive());
        response.setStartDate(entity.getStartDate());
        response.setEndDate(entity.getEndDate());
        response.setProductId(entity.getProduct() != null ? entity.getProduct().getId() : null);
        response.setProductName(entity.getProduct() != null ? entity.getProduct().getTitle() : null);
        return response;
    }
    
    @Override
    protected Discount convertToEntity(DiscountDTO.CreateDiscountRequest dto) {
        Discount entity = new Discount();
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setDiscountPercent(dto.getDiscountPercent());
        entity.setActive(dto.getActive() != null ? dto.getActive() : true);
        entity.setStartDate(dto.getStartDate());
        entity.setEndDate(dto.getEndDate());
        
        // Ürün bağlantısı
        if (dto.getProductId() != null) {
            Product product = productRepository.findById(dto.getProductId())
                    .orElseThrow(() -> new RuntimeException("Product not found with id: " + dto.getProductId()));
            entity.setProduct(product);
        }
        
        return entity;
    }
    
    @Override
    protected Discount convertToEntityForUpdate(Long id, DiscountDTO.CreateDiscountRequest dto) {
        Discount entity = discountRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Discount not found with id: " + id));
        
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setDiscountPercent(dto.getDiscountPercent());
        if (dto.getActive() != null) {
            entity.setActive(dto.getActive());
        }
        entity.setStartDate(dto.getStartDate());
        entity.setEndDate(dto.getEndDate());
        
        // Ürün bağlantısı güncelleme
        if (dto.getProductId() != null) {
            Product product = productRepository.findById(dto.getProductId())
                    .orElseThrow(() -> new RuntimeException("Product not found with id: " + dto.getProductId()));
            entity.setProduct(product);
        }
        
        return entity;
    }
}
```

### Controller
```java
@RestController
@RequestMapping("/api/discounts")
public class DiscountController extends GenericController<Discount, DiscountDTO.DiscountResponse, DiscountDTO.CreateDiscountRequest, Long> {
    
    private final DiscountService discountService;
    
    public DiscountController(DiscountService discountService) {
        super(discountService);
        this.discountService = discountService;
    }
    
    @GetMapping("/active")
    public ResponseEntity<List<DiscountDTO.DiscountResponse>> getActiveDiscounts() {
        return ResponseEntity.ok(discountService.getActiveDiscounts());
    }
    
    @GetMapping("/product/{productId}")
    public ResponseEntity<List<DiscountDTO.DiscountResponse>> getDiscountsByProduct(@PathVariable Long productId) {
        return ResponseEntity.ok(discountService.getDiscountsByProduct(productId));
    }
}
```

## 12. Proje Entegrasyonu

1. `generic` paketini oluşturup şablon sınıfları yerleştirin
2. Her varlık için model, DTO, repository, service ve controller dosyalarını oluşturun
3. Angular mock data ile Spring Boot entity ve DTO arasında doğru eşleştirmeyi sağlayın
4. Spring Boot application.properties ayarlarını veritabanı bağlantısı için yapılandırın
5. Angular servisleri Spring Boot API endpoint'lerine bağlanacak şekilde güncelleyin 